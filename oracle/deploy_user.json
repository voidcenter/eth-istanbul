{"language":"Solidity","sources":{"src/DemoOracleUser.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interface/IRepOracleUser.sol\";\n\ncontract DemoRepOracleUser is Ownable, RepOracleUser {\n    mapping(bytes32 => bool) public pendingRequests;\n    mapping(bytes32 => bool) public proofingRequests;\n\n    event RequestSent(bytes32 indexed requestId);\n    event ReputationScoreReceived(bytes32 indexed requestId, IRepOracleContract.RepScore score);\n    event ReputationScoreCommitted(bytes32 indexed requestId);\n    event ReputationScoreRolledback(bytes32 indexed requestId);\n\n    constructor(address _oracleAddress) RepOracleUser(_oracleAddress) Ownable(msg.sender) {}\n    \n    function setOracle(address _oracleAddress) public onlyOwner() {\n        reputationOracle = _oracleAddress;\n        oracle = IRepOracleContract(reputationOracle);\n    }\n\n    function requestReputationScore(address _address, bool _forceRefresh, uint256 _expirationBlock)\n        external\n        onlyOwner\n    {\n        bytes32 requestId = oracle.requestReputationScore(_address, _forceRefresh, _expirationBlock);\n        pendingRequests[requestId] = true;\n        emit RequestSent(requestId);\n    }\n\n    // this function will get callbacked immediately a reputation score is computed, however, at this point\n    // the score is yet to be verified.\n    function reputationCallback(IRepOracleContract.RepScore memory score) external override onlyRepOracle {\n        require(msg.sender == address(oracle), \"Only oracle can call this function\");\n        require(pendingRequests[score.requestId], \"Request ID not found\");\n\n        emit ReputationScoreReceived(score.requestId, score);\n        delete pendingRequests[score.requestId];\n        proofingRequests[score.requestId] = true;\n    }\n\n    // when this function is called, the requested score is verified\n    function commit(bytes32 _requestId) external override onlyRepOracle {\n        emit ReputationScoreCommitted(_requestId);\n        delete proofingRequests[_requestId];\n    }\n\n    // when this function is called, the score verification failed, rollback anything if needed\n    // this is function will never be called if requested has already been committed.\n    function rollback(bytes32 _requestId) external override onlyRepOracle {\n        emit ReputationScoreRolledback(_requestId);\n        delete proofingRequests[_requestId];\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"src/interface/IRepOracleUser.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IRepOracle.sol\";\n\ninterface IRepOracleUser {\n    function reputationCallback(IRepOracleContract.RepScore memory score) external;\n\n    function commit(bytes32 _requestId) external;\n\n    function rollback(bytes32 _requestId) external;\n}\n\nabstract contract RepOracleUser is IRepOracleUser {\n    address reputationOracle;\n    IRepOracleContract oracle;\n\n    modifier onlyRepOracle() {\n        require(msg.sender == reputationOracle);\n        _;\n    }\n\n    constructor(address _reputationOracle) {\n        reputationOracle = _reputationOracle;\n        oracle = IRepOracleContract(_reputationOracle);\n    }\n    // this function will get callbacked immediately a reputation score is computed, however, at this point\n    // the score is yet to be verified.\n\n    function reputationCallback(IRepOracleContract.RepScore memory score) external virtual;\n\n    // when this function is called, the requested score is verified\n    function commit(bytes32 _requestId) external virtual;\n\n    // when this function is called, the score verification failed, rollback anything if needed\n    // this is function will never be called if requested has already been committed.\n    function rollback(bytes32 _requestId) external virtual;\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"src/interface/IRepOracle.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IRepOracleContract {\n\n    struct OnchainDetails {\n\n        uint256 allChainMaxNounce;\n        uint256 nonce;\n        uint256 allChainMaxAge;\n        uint256 age;\n        uint256 allChainUsdBalance;\n        uint256 usdBalance;\n    }\n\n    struct SocialDetail {\n        bool worldcoinConfirmed;\n        uint256 lensFollowers;\n        uint256 twitterFollowers;\n        uint256 noncompliantTxns;\n        bytes ens;\n    }\n\n    struct RepScore {\n        address requestingAddress;\n        int256 score;\n        uint256 blocknumber;\n        bool isCompliant; // multi-chain\n        bool isHuman;\n        SocialDetail socialDetail;\n        OnchainDetails onchainDetail;\n        bytes32 requestId;\n        bytes ipfs_hash;\n    }\n\n    event BatchRequestReceived(\n        bytes32 indexed requestId, address indexed requester, address[] addresses, uint256 nonce\n    );\n    event RequestReceived(bytes32 indexed requestId, address indexed requester, address addresses, uint256 nonce);\n\n    event CachedRequestReceived(bytes32 indexed requestId, address indexed requester, address addresses, uint256 nonce);\n\n    event ReputationScoreSent(bytes32 indexed requestId, int256 reputationScore, bytes32 indexed assertionId);\n\n    // function requestBatchReputationScore(address[] calldata _addresses) external returns (bytes32);\n\n    function requestReputationScore(address _address, bool forceRefresh, uint256 expirationBlock)\n        external\n        returns (bytes32);\n\n    function sendReputationScore(IRepOracleContract.RepScore calldata score, bytes memory _evidence)\n        external\n        returns (bytes32 assertionId);\n\n    function settelUMAAssertion(bytes32 assertionId) external;\n}\n"}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"paris","libraries":{}}}